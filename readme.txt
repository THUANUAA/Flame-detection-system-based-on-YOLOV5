本项目中，阿里云、树莓派、stm32开发板的代码都是未改动可以在对应的环境下直接使用。
yolov5中，原来的检测源码现在是在temp.py里面，现在的detect.py代码里面是优化过后的串口接收＋图像检测代码，
test.py里面也是的。
他们的思想都是串口接收和图像检测多线程执行，如果接收到了图像，则线程间通信给图像检测的线程，
不过代码都存在图像检测无法执行的问题。
而aaa.py里面则是正常的图像检测的代码，其中加载图片一般耗时0.001s,解码图片耗时0.01s，推理图片耗时0.15s,
保存图片耗时0.01s,一般一张图片是需要0.3s左右的时间进行处理，而大概1s又能处理30张图片左右

如果后面继续做这个项目，可以继续压缩代码的运行时间，是存在更加短的时间的

还有树莓派中c++的代码，可以优化，可以用线程间通信来代替文件的读写去判断是否运行相关代码，
时间应该会比读写文件更短而且更加可靠

uart的极限波特率是128000，在串口传输上无法提升，可以试试spi或者无线传输


RTOS项目：（图像传输速度要提升）
STM32开发板（前端采集设备）：
任务1：摄像头采集图像并通过串口传输到树莓派：用STM32F103ZET6开发板和OV7725摄像头采集图像，使用FreeRTOS来管理摄像头拍摄任务。
任务2：当树莓派检测到火灾时，利用SPI向开发板发送信号，触发蜂鸣器警报。
树莓派（数据处理与分析）：
任务1：串口接收图像数据：树莓派上运行Python串口助手接收STM32发送的图像数据。
任务2：YOLOv5模型分析：接收图像后，利用YOLOv5模型进行火焰检测，Python调用YOLOv5的模型库进行推理。通过C++的框架控制Python调用。
任务3：上传数据到云服务器：当检测到火焰时，将报警数据和图像上传到云服务器，同时记录温湿度传感器数据。
云服务器（数据存储与备份）：
任务1：负责接收来自树莓派的数据并进行持久化存储和备份。用MQTT与树莓派进行数据交互。
任务2：存储数据到SQLite数据库：在云服务器用SQLite存储分析结果、传感器数据及报警历史。
任务3：利用Rust编写后端程序调取数据库数据显示在网页上。

待优化部分：
1.目前921600波特率的传输时间是3s左右，检测的时间是0.1s左右（解码0.1，检测0.05，保存0.2，画框0.0），将优化好的python代码放到c++程序中，优化c++代码，现在还需要python代码发送检测信号，然后给c++代码，c++接收到检测结果后，调用mqtt部分的代码将检测后的图片和其他的数据发给云服务器，然后spi部分的代码再将检测结果代表的0和1发送给开发板 ,查看波特率最高能到多少。
2.用C#写一个windows控制程序，控制整个项目的运行。
3.优化wifi传输的方式，了解wifi模块底层。
4.优化网页的自动刷新和自动显示。